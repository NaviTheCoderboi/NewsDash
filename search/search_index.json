{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":""},{"location":"#newsdash","title":"NewsDash","text":"<p>NewsDash is a fast and reliable Python wrapper for the News API that simplifies accessing the latest news articles from around the world. \ud83d\udcf0</p> <p>Made by: NaviTheCoderboi</p> <p>Note</p> <p>This is a WIP library, please report bugs if you find one</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Fast performance: This API wrapper is designed to be fast and efficient, allowing users to retrieve news articles quickly and easily.</li> <li>Reliable functionality: The wrapper uses best practices to ensure reliable functionality and accuracy in retrieving news articles from the API.</li> <li>Easy-to-use interface: The API wrapper has an intuitive interface that makes it easy for developers to interact with the API and retrieve news articles without having to worry about the details of the underlying protocol.</li> <li>Built with aiohttp: The wrapper is built using the popular aiohttp library, which provides high-performance asynchronous HTTP client/server for asyncio and Python. This means the wrapper takes advantage of the latest and greatest in async programming techniques to provide fast and efficient performance.</li> <li>Customizable functionality: The wrapper has a range of customization options, allowing developers to tailor their use of the API to their specific needs.</li> <li>Flexible data handling: The wrapper is designed to handle a wide variety of data formats, allowing developers to work with the data in the way that best suits their needs.</li> <li>Well-documented: The wrapper has clear and comprehensive documentation, making it easy for developers to get up and running quickly and troubleshoot any issues that may arise.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>python -m pip install newsdash\n</code></pre>"},{"location":"#examples","title":"Examples","text":"<ul> <li>with client <pre><code>from newsdash import NewsDash\nimport asyncio\ncl = NewsDash(\"your_api_key\")\nasync def get_news():\nprint(await cl.get_everything(query=\"tech\",pageSize=5))\nprint(await cl.get_top_headlines(query=\"Microsoft\"))\nprint(await cl.get_sources(country=\"in\",language=\"en\"))\nasyncio.run(get_news())\n</code></pre></li> <li>with async context manager <pre><code>from newsdash import NewsDash\nimport asyncio\nasync def main():\nasync with NewsDash(\"api_key\") as nd:\nprint(await nd.get_everything(query=\"apple\"))\nasyncio.run(main())\n</code></pre></li> </ul>"},{"location":"#important-urls","title":"Important urls","text":"<ul> <li>NewsApi</li> <li>NewsDash repository</li> <li>NewsDash pypi</li> <li>NewsDash documentation</li> </ul>"},{"location":"api_reference/HttpClient/","title":"HttpClient","text":""},{"location":"api_reference/HttpClient/#newsdash.http.HttpClient","title":"<code>HttpClient</code>","text":"<p>The HTTP client that NewsDash is using</p> <p>Attributes:</p> Name Type Description <code>session</code> <code>aiohttp.ClientSession, optional</code> <p>Custom ClientSession you want the client to use., by default None</p> <code>logger</code> <code>loguru.logger</code> <p>The logger used to log information.</p> Source code in <code>newsdash\\http.py</code> <pre><code>class HttpClient:\n\"\"\"\n    The HTTP client that NewsDash is using\n    Attributes\n    ----------\n    session : aiohttp.ClientSession, optional\n        Custom ClientSession you want the client to use., by default None\n    logger: loguru.logger\n        The logger used to log information.\n    \"\"\"\ndef __init__(\nself,\n*,\nsession: tp.Optional[aiohttp.ClientSession] = None,\nlogger: \"loguru.logger\",\n) -&gt; None:\n\"\"\"\n        Parameters\n        ----------\n        logger : loguru.logger\n            The logger used to log information.\n        session : tp.Optional[aiohttp.ClientSession], optional\n            The session to use for making requests.\n        Returns\n        -------\n        HttpClient\n            The http client.\n        \"\"\"\nself.session = session\nself.logger = logger\nasync def connect(self) -&gt; None:\n\"\"\"\n        connect to the http client.\n        \"\"\"\nif self.session is None:\nself.session = aiohttp.ClientSession()\nself.logger.info(\"successfully connected to the http client\")\nasync def request(\nself, url: str, method: str, params: dict = {}, headers: dict = {}\n) -&gt; tp.Any:\n\"\"\"\n        Make requests to api.\n        Parameters\n        ----------\n        url : str\n            The url to which request is to be made\n        method : str\n            The method for making request.\n        params : dict, optional\n            The params for url for making request, by default {}\n        headers : dict, optional\n            The headers for url for making request, by default {}\n        Returns\n        -------\n        tp.Any\n            The response from api.\n        Raises\n        ------\n        HTTPException.from_response\n            If you get bad response codes.\n        HTTPException\n            If the session is not provided\n        \"\"\"\nif self.session is None:\nawait self.connect()\nif self.session is not None:\nasync with self.session.request(\nmethod, url, params=params, headers=headers\n) as response:\nif 300 &gt; response.status &gt;= 200:\nreturn await response.json()\nelse:\nresp = await response.json()\nmessage = f\"received status code {response.status} with code &gt; {resp['code']}\"\nself.logger.error(message)\nraise HTTPException.from_response(await response.json())\nelse:\nraise HTTPException(\"No session was provided\")\n</code></pre>"},{"location":"api_reference/HttpClient/#newsdash.http.HttpClient.__init__","title":"<code>__init__(*, session=None, logger)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>logger</code> <code>loguru.logger</code> <p>The logger used to log information.</p> required <code>session</code> <code>tp.Optional[aiohttp.ClientSession], optional</code> <p>The session to use for making requests.</p> <code>None</code> <p>Returns:</p> Type Description <code>HttpClient</code> <p>The http client.</p> Source code in <code>newsdash\\http.py</code> <pre><code>def __init__(\nself,\n*,\nsession: tp.Optional[aiohttp.ClientSession] = None,\nlogger: \"loguru.logger\",\n) -&gt; None:\n\"\"\"\n    Parameters\n    ----------\n    logger : loguru.logger\n        The logger used to log information.\n    session : tp.Optional[aiohttp.ClientSession], optional\n        The session to use for making requests.\n    Returns\n    -------\n    HttpClient\n        The http client.\n    \"\"\"\nself.session = session\nself.logger = logger\n</code></pre>"},{"location":"api_reference/HttpClient/#newsdash.http.HttpClient.connect","title":"<code>connect()</code>  <code>async</code>","text":"<p>connect to the http client.</p> Source code in <code>newsdash\\http.py</code> <pre><code>async def connect(self) -&gt; None:\n\"\"\"\n    connect to the http client.\n    \"\"\"\nif self.session is None:\nself.session = aiohttp.ClientSession()\nself.logger.info(\"successfully connected to the http client\")\n</code></pre>"},{"location":"api_reference/HttpClient/#newsdash.http.HttpClient.request","title":"<code>request(url, method, params={}, headers={})</code>  <code>async</code>","text":"<p>Make requests to api.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The url to which request is to be made</p> required <code>method</code> <code>str</code> <p>The method for making request.</p> required <code>params</code> <code>dict, optional</code> <p>The params for url for making request, by default {}</p> <code>{}</code> <code>headers</code> <code>dict, optional</code> <p>The headers for url for making request, by default {}</p> <code>{}</code> <p>Returns:</p> Type Description <code>tp.Any</code> <p>The response from api.</p> <p>Raises:</p> Type Description <code>HTTPException.from_response</code> <p>If you get bad response codes.</p> <code>HTTPException</code> <p>If the session is not provided</p> Source code in <code>newsdash\\http.py</code> <pre><code>async def request(\nself, url: str, method: str, params: dict = {}, headers: dict = {}\n) -&gt; tp.Any:\n\"\"\"\n    Make requests to api.\n    Parameters\n    ----------\n    url : str\n        The url to which request is to be made\n    method : str\n        The method for making request.\n    params : dict, optional\n        The params for url for making request, by default {}\n    headers : dict, optional\n        The headers for url for making request, by default {}\n    Returns\n    -------\n    tp.Any\n        The response from api.\n    Raises\n    ------\n    HTTPException.from_response\n        If you get bad response codes.\n    HTTPException\n        If the session is not provided\n    \"\"\"\nif self.session is None:\nawait self.connect()\nif self.session is not None:\nasync with self.session.request(\nmethod, url, params=params, headers=headers\n) as response:\nif 300 &gt; response.status &gt;= 200:\nreturn await response.json()\nelse:\nresp = await response.json()\nmessage = f\"received status code {response.status} with code &gt; {resp['code']}\"\nself.logger.error(message)\nraise HTTPException.from_response(await response.json())\nelse:\nraise HTTPException(\"No session was provided\")\n</code></pre>"},{"location":"api_reference/NewsDash/","title":"NewsDash","text":"<p>A class to interact with NewsAPI.</p> <p>Attributes:</p> Name Type Description <code>logger</code> <code>loguru.Logger</code> <p>The logger used to log information.</p> <code>_http_client</code> <code>.HttpClient</code> <p>The HTTP client used to make requests to the api.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from newsdash import NewsDash\n&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; client = NewsDash('YOUR_API_KEY')\n&gt;&gt;&gt; async def get_news():\n... print(await client.get_everything(query='apple'))\n... await client.close()\n&gt;&gt;&gt; asyncio.run(get_news())\n</code></pre> Source code in <code>newsdash\\client.py</code> <pre><code>class NewsDash:\n\"\"\"\n    A class to interact with NewsAPI.\n    Attributes\n    ----------\n    logger : loguru.Logger\n        The logger used to log information.\n    _http_client : .HttpClient\n        The HTTP client used to make requests to the api.\n    Examples\n    --------\n    &gt;&gt;&gt; from newsdash import NewsDash\n    &gt;&gt;&gt; import asyncio\n    &gt;&gt;&gt; client = NewsDash('YOUR_API_KEY')\n    &gt;&gt;&gt; async def get_news():\n    ... print(await client.get_everything(query='apple'))\n    ... await client.close()\n    &gt;&gt;&gt; asyncio.run(get_news())\n    \"\"\"\ndef __init__(\nself,\napi_key: str,\n*,\nsession: tp.Optional[\"aiohttp.ClientSession\"] = None,\nfile_logging: tp.Union[\nbool,\nlist[\n\"os.PathLike\",\ntp.Union[bool, str],\ntp.Union[bool, str],\ntp.Union[bool, str],\n],\n] = False,\n) -&gt; None:\n\"\"\"\n        Parameters\n        ----------\n        api_key : str\n            The api key you get from NewsApi.\n        session : typing.Optional[aiohttp.ClientSession], optional\n            Custom ClientSession you want the client to use., by default None\n        file_logging : typing.Union[bool,list[os.PathLike,typing.Union[bool, str],typing.Union[bool, str],typing.Union[bool, str],],], optional\n            Custom ClientSession you want the client to use., by default False\n        Returns\n        -------\n        NewsDash\n            The NewsDash client.\n        \"\"\"\nself.logger = loguru.logger\nself.api_key = api_key\nif file_logging != False:\nfile = file_logging[0]\nif len(file_logging) &gt; 1 and file_logging[1]:\nrotation = file_logging[1]\nelse:\nrotation = None\nif len(file_logging) &gt; 2 and file_logging[2]:\nretention = file_logging[2]\nelse:\nretention = None\nif len(file_logging) &gt; 3 and file_logging[3]:\ncompression = file_logging[3]\nelse:\ncompression = None\nself.logger.add(\nfile, rotation=rotation, retention=retention, compression=compression\n)\nself._http_client = HttpClient(session=session, logger=self.logger)\nasync def __aexit__(\nself,\nexc_type: tp.Optional[tp.Type[BaseException]],\nexc_val: tp.Optional[BaseException],\nexc_tb: tp.Optional[\"TracebackType\"],\n) -&gt; None:\nif self._http_client.session is not None:\nawait self._http_client.session.close()\nasync def __aenter__(self) -&gt; \"NewsDash\":\nreturn self\nasync def close(self) -&gt; None:\n\"\"\"\n        Closes the session, Note- no need to use it if you are using context manager.\n        \"\"\"\nself.logger.info(\"Closing session\")\nif self._http_client.session is not None:\nawait self._http_client.session.close()\n@property\ndef http_client(self) -&gt; HttpClient:\n\"\"\"\n        The http client NewsDash is using.\n        Returns\n        -------\n        HttpClient\n            The http client..\n        \"\"\"\nreturn self._http_client\nasync def get_everything(\nself,\n*,\nquery: str,\nsearchIn: tp.Literal[\"title\", \"description\", \"body\"] = None,\nsources: str = None,\ndomains: str = None,\nexcludeDomains: str = None,\ndate_from: str = None,\ndate_to: str = None,\nlanguage: tp.Literal[\n\"ar\",\n\"de\",\n\"en\",\n\"es\",\n\"fr\",\n\"he\",\n\"it\",\n\"nl\",\n\"no\",\n\"pt\",\n\"ru\",\n\"sv\",\n\"ud\",\n\"zh\",\n] = None,\nsortBy: tp.Literal[\"relevancy\", \"popularity\", \"publishedAt\"] = None,\npageSize: int = None,\npage: int = None,\n) -&gt; tp.Any:\n\"\"\"\n        Get every news from the NewsApi by searching with query and other optional paameters.\n        Parameters\n        ----------\n        query : str\n            Keywords or phrases to search for in the article title and body.\n        searchIn : typing.Literal[\"title\",\"description\",\"body\"], optional\n            The fields to restrict your query search to,by default None\n        sources : str, optional\n            A comma-seperated string of identifiers (maximum 20) for the news sources or blogs you want headlines from, by default None\n        domains : str, optional\n            A comma-seperated string of domains (eg bbc.co.uk, techcrunch.com, engadget.com) to restrict the search to, by default None\n        excludeDomains : str, optional\n            A comma-seperated string of domains (eg bbc.co.uk, techcrunch.com, engadget.com) to remove from the results, by default None\n        date_from : str, optional\n            A date and optional time for the oldest article allowed. This should be in ISO 8601 format (e.g. 2023-04-17 or 2023-04-17T12:33:30), by default None\n        date_to : str, optional\n            A date and optional time for the newest article allowed. This should be in ISO 8601 format (e.g. 2023-04-17 or 2023-04-17T12:33:30), by default None\n        language : typing.Literal[\"ar\", \"de\", \"en\", \"es\", \"fr\", \"he\", \"it\", \"nl\", \"no\", \"pt\", \"ru\", \"sv\", \"ud\", \"zh\"], optional\n            The 2-letter ISO-639-1 code of the language you want to get headlines for. Possible options: ar de en es fr he it nl no pt ru sv ud zh, by default None\n        sortBy : typing.Literal[\"relevancy\", \"popularity\", \"publishedAt\"], optional\n            The order to sort the articles in. Possible options: relevancy, popularity, publishedAt. relevancy = articles more closely related to q come first. popularity = articles from popular sources and publishers come first. publishedAt = newest articles come first, by default None\n        pageSize : int, optional\n            The number of results to return per page, by default None\n        page : int, optional\n            Use this to page through the results, by default None\n        Returns\n        -------\n        typing.Any\n            The response from NewsApi after getting news.\n        Raises\n        ------\n        HTTPException\n            raises HTTPException if the status code is not `ok`.\n        Examples\n        -------\n        &gt;&gt;&gt; from newsdash import NewsDash\n        &gt;&gt;&gt; import asyncio\n        &gt;&gt;&gt; async def main():\n        ... async with NewsDash('YOUR_API_KEY') as nd:\n        ... print(await nd.get_everything(query='apple'))\n        &gt;&gt;&gt; asyncio.run(main())\n        \"\"\"\nparams = {}\nif query is not None:\nif not isinstance(query, str):\nraise TypeError(\"query should be a string\")\nparams[\"q\"] = query\nif searchIn is not None:\nif isinstance(searchIn, str):\nif searchIn not in [\"title\", \"description\", \"body\"]:\nraise ValueError(\n\"searchIn should be one of 'title', 'description', or 'body'\"\n)\nelse:\nraise TypeError(\"searchIn should be a string\")\nparams[\"searchIn\"] = searchIn\nif sources is not None:\nif not isinstance(sources, str):\nraise TypeError(\"sources should be a string\")\nparams[\"sources\"] = sources\nif domains is not None:\nif not isinstance(domains, str):\nraise TypeError(\"domains should be a string\")\nparams[\"domains\"] = domains\nif excludeDomains is not None:\nif not isinstance(excludeDomains, str):\nraise TypeError(\"excludeDomains should be a string\")\nparams[\"excludeDomains\"] = excludeDomains\nif date_from is not None:\nif not isinstance(date_from, str):\nraise TypeError(\"date_from should be a string\")\nparams[\"from\"] = date_from\nif date_to is not None:\nif not isinstance(date_to, str):\nraise TypeError(\"date_to should be a string\")\nparams[\"to\"] = date_to\nif language is not None:\nif isinstance(language, str):\nif language not in [\n\"ar\",\n\"de\",\n\"en\",\n\"es\",\n\"fr\",\n\"he\",\n\"it\",\n\"nl\",\n\"no\",\n\"pt\",\n\"ru\",\n\"sv\",\n\"ud\",\n\"zh\",\n]:\nraise ValueError(\n\"language should be one out of the languages provided by newsapi\"\n)\nelse:\nraise TypeError(\"language should be a string\")\nparams[\"language\"] = language\nif sortBy is not None:\nif isinstance(sortBy, str):\nif sortBy not in [\"relevancy\", \"popularity\", \"publishedAt\"]:\nraise ValueError(\n\"sortBy should be one out of relevancy, popularity or publishedAt\"\n)\nelse:\nraise TypeError(\"sortBy should be a string\")\nparams[\"sortBy\"] = sortBy\nif pageSize is not None:\nif isinstance(pageSize, int):\nif pageSize &lt; 0:\nraise ValueError(\"pageSize should be greater than 0\")\nelse:\nraise TypeError(\"pageSize should be an integer\")\nparams[\"pageSize\"] = pageSize\nif page is not None:\nif isinstance(page, int):\nif page &lt; 0:\nraise ValueError(\"page should be greater than 0\")\nelse:\nraise TypeError(\"page should be an integer\")\nparams[\"page\"] = page\nheaders = {\"X-Api-Key\": self.api_key}\ndata = await self._http_client.request(\n\"https://newsapi.org/v2/everything\", \"GET\", headers=headers, params=params\n)\nif data:\nreturn data\nasync def get_top_headlines(\nself,\n*,\ncountry: tp.Literal[\n\"ae\",\n\"ar\",\n\"at\",\n\"au\",\n\"be\",\n\"bg\",\n\"br\",\n\"ca\",\n\"ch\",\n\"cn\",\n\"co\",\n\"cu\",\n\"cz\",\n\"de\",\n\"eg\",\n\"fr\",\n\"gb\",\n\"gr\",\n\"hk\",\n\"hu\",\n\"id\",\n\"ie\",\n\"il\",\n\"in\",\n\"it\",\n\"jp\",\n\"kr\",\n\"lt\",\n\"lv\",\n\"ma\",\n\"mx\",\n\"my\",\n\"ng\",\n\"nl\",\n\"no\",\n\"nz\",\n\"ph\",\n\"pl\",\n\"pt\",\n\"ro\",\n\"rs\",\n\"ru\",\n\"sa\",\n\"se\",\n\"sg\",\n\"si\",\n\"sk\",\n\"th\",\n\"tr\",\n\"tw\",\n\"ua\",\n\"us\",\n\"ve\",\n\"za\",\n] = None,\ncategory: tp.Literal[\n\"business\",\n\"entertainment\",\n\"general\",\n\"health\",\n\"science\",\n\"sports\",\n\"technology\",\n] = None,\nsources: str = None,\nquery: str = None,\npageSize: int = None,\npage: int = None,\n) -&gt; tp.Any:\n\"\"\"\n        Get the top headleines of news from the NewsApi by searching with query and other optional paameters.\n        Parameters\n        ----------\n        country : typing.Literal[\"ae\", \"ar\", \"at\", \"au\", \"be\", \"bg\", \"br\", \"ca\", \"ch\", \"cn\", \"co\", \"cu\", \"cz\", \"de\", \"eg\", \"fr\", \"gb\", \"gr\", \"hk\", \"hu\", \"id\", \"ie\", \"il\", \"in\", \"it\", \"jp\", \"kr\", \"lt\", \"lv\", \"ma\", \"mx\", \"my\", \"ng\", \"nl\", \"no\", \"nz\", \"ph\", \"pl\", \"pt\", \"ro\", \"rs\", \"ru\", \"sa\", \"se\", \"sg\", \"si\", \"sk\", \"th\", \"tr\", \"tw\", \"ua\", \"us\", \"ve\", \"za\"], optional\n            The 2-letter ISO 3166-1 code of the country you want to get headlines for. Possible options: ae ar at au be bg br ca ch cn co cu cz de eg fr gb gr hk hu id ie il in it jp kr lt lv ma mx my ng nl no nz ph pl pt ro rs ru sa se sg si sk th tr tw ua us ve za, by default None\n        category : typing.Literal[\"business\",\"entertainment\",\"general\",\"health\",\"science\",\"sports\",\"technology\"], optional\n            The category you want to get headlines for. Possible options: business entertainment general health science sports technology, by default None\n        sources : str, optional\n            A comma-seperated string of identifiers for the news sources or blogs you want headlines from, by default None\n        query : str, optional\n            Keywords or a phrase to search for, by default None\n        pageSize : int, optional\n            he number of results to return per page (request). 20 is the default, 100 is the maximum, by default None\n        page : int, optional\n            Use this to page through the results if the total results found is greater than the page size, by default None\n        Returns\n        -------\n         typing.Any\n            The response from NewsApi after getting news.\n        Raises\n        ------\n        HTTPException\n            raises HTTPException if the status code is not `ok`.\n        Examples\n        -------\n        &gt;&gt;&gt; from newsdash import NewsDash\n        &gt;&gt;&gt; import asyncio\n        &gt;&gt;&gt; async def main():\n        ... async with NewsDash('YOUR_API_KEY') as nd:\n        ... print(await nd.get_top_headlines(query='apple'))\n        &gt;&gt;&gt; asyncio.run(main())\n        \"\"\"\nparams = {}\nif country is not None:\nif country not in [\n\"ae\",\n\"ar\",\n\"at\",\n\"au\",\n\"be\",\n\"bg\",\n\"br\",\n\"ca\",\n\"ch\",\n\"cn\",\n\"co\",\n\"cu\",\n\"cz\",\n\"de\",\n\"eg\",\n\"fr\",\n\"gb\",\n\"gr\",\n\"hk\",\n\"hu\",\n\"id\",\n\"ie\",\n\"il\",\n\"in\",\n\"it\",\n\"jp\",\n\"kr\",\n\"lt\",\n\"lv\",\n\"ma\",\n\"mx\",\n\"my\",\n\"ng\",\n\"nl\",\n\"no\",\n\"nz\",\n\"ph\",\n\"pl\",\n\"pt\",\n\"ro\",\n\"rs\",\n\"ru\",\n\"sa\",\n\"se\",\n\"sg\",\n\"si\",\n\"sk\",\n\"th\",\n\"tr\",\n\"tw\",\n\"ua\",\n\"us\",\n\"ve\",\n\"za\",\n]:\nraise ValueError(\n\"country should be one out of the countries provided by news api\"\n)\nparams[\"country\"] = country\nif category is not None:\nif category not in [\n\"business\",\n\"entertainment\",\n\"general\",\n\"health\",\n\"science\",\n\"sports\",\n\"technology\",\n]:\nraise ValueError(\n\"category should be one out of the categories provided by news api\"\n)\nparams[\"category\"] = category\nif sources is not None:\nif not isinstance(sources, str):\nraise TypeError(\"sources should be an string\")\nparams[\"sources\"] = sources\nif query is not None:\nif not isinstance(query, str):\nraise TypeError(\"query should be an string\")\nparams[\"q\"] = query\nif pageSize is not None:\nif not isinstance(pageSize, int):\nraise TypeError(\"pageSize should be an integer\")\nparams[\"pageSize\"] = pageSize\nif page is not None:\nif not isinstance(page, int):\nraise TypeError(\"page should be an integer\")\nparams[\"page\"] = page\nheaders = {\"X-Api-Key\": self.api_key}\ndata = await self._http_client.request(\n\"https://newsapi.org/v2/top-headlines\",\n\"GET\",\nheaders=headers,\nparams=params,\n)\nif data:\nreturn data\nasync def get_sources(\nself,\n*,\ncountry: tp.Literal[\n\"ae\",\n\"ar\",\n\"at\",\n\"au\",\n\"be\",\n\"bg\",\n\"br\",\n\"ca\",\n\"ch\",\n\"cn\",\n\"co\",\n\"cu\",\n\"cz\",\n\"de\",\n\"eg\",\n\"fr\",\n\"gb\",\n\"gr\",\n\"hk\",\n\"hu\",\n\"id\",\n\"ie\",\n\"il\",\n\"in\",\n\"it\",\n\"jp\",\n\"kr\",\n\"lt\",\n\"lv\",\n\"ma\",\n\"mx\",\n\"my\",\n\"ng\",\n\"nl\",\n\"no\",\n\"nz\",\n\"ph\",\n\"pl\",\n\"pt\",\n\"ro\",\n\"rs\",\n\"ru\",\n\"sa\",\n\"se\",\n\"sg\",\n\"si\",\n\"sk\",\n\"th\",\n\"tr\",\n\"tw\",\n\"ua\",\n\"us\",\n\"ve\",\n\"za\",\n] = None,\nlanguage: tp.Literal[\n\"ar\",\n\"de\",\n\"en\",\n\"es\",\n\"fr\",\n\"he\",\n\"it\",\n\"nl\",\n\"no\",\n\"pt\",\n\"ru\",\n\"se\",\n\"ud\",\n\"zh\",\n] = None,\ncategory: tp.Literal[\n\"business\",\n\"entertainment\",\n\"general\",\n\"health\",\n\"science\",\n\"sports\",\n\"technology\",\n] = None,\n) -&gt; tp.Any:\n\"\"\"\n        Get the sources or publishers of news available on NewsApi.\n        Parameters\n        ----------\n        country : typinp.Literal[\"ae\", \"ar\", \"at\", \"au\", \"be\", \"bg\", \"br\", \"ca\", \"ch\", \"cn\", \"co\", \"cu\", \"cz\", \"de\", \"eg\", \"fr\", \"gb\", \"gr\", \"hk\", \"hu\", \"id\", \"ie\", \"il\", \"in\", \"it\", \"jp\", \"kr\", \"lt\", \"lv\", \"ma\", \"mx\", \"my\", \"ng\", \"nl\", \"no\", \"nz\", \"ph\", \"pl\", \"pt\", \"ro\", \"rs\", \"ru\", \"sa\", \"se\", \"sg\", \"si\", \"sk\", \"th\", \"tr\", \"tw\", \"ua\", \"us\", \"ve\", \"za\"], optional\n            The 2-letter ISO 3166-1 code of the country you want to get headlines for. Possible options: ae ar at au be bg br ca ch cn co cu cz de eg fr gb gr hk hu id ie il in it jp kr lt lv ma mx my ng nl no nz ph pl pt ro rs ru sa se sg si sk th tr tw ua us ve za,, by default None\n        language : typinp.Literal[\"ar\", \"de\", \"en\", \"es\", \"fr\", \"he\", \"it\", \"nl\", \"no\", \"pt\", \"ru\", \"sv\", \"ud\", \"zh\"], optional\n            The 2-letter ISO-639-1 code of the language you want to get headlines for. Possible options: ar de en es fr he it nl no pt ru sv ud zh, by default None\n        category : typing.Literal[\"business\",\"entertainment\",\"general\",\"health\",\"science\",\"sports\",\"technology\"] , optional\n            The category you want to get headlines for. Possible options: business entertainment general health science sports technology, by default None\n        Returns\n        -------\n         typing.Any\n            The response from NewsApi after getting sources.\n        Raises\n        ------\n        HTTPException\n            raises HTTPException if the status code is not `ok`.\n        Examples\n        -------\n        &gt;&gt;&gt; from newsdash import NewsDash\n        &gt;&gt;&gt; import asyncio\n        &gt;&gt;&gt; async def main():\n        ... async with NewsDash('YOUR_API_KEY') as nd:\n        ... print(await nd.get_sources(catgory='entertainment'))\n        &gt;&gt;&gt; asyncio.run(main())\n        \"\"\"\nparams = {}\nif country is not None:\nif country not in [\n\"ae\",\n\"ar\",\n\"at\",\n\"au\",\n\"be\",\n\"bg\",\n\"br\",\n\"ca\",\n\"ch\",\n\"cn\",\n\"co\",\n\"cu\",\n\"cz\",\n\"de\",\n\"eg\",\n\"fr\",\n\"gb\",\n\"gr\",\n\"hk\",\n\"hu\",\n\"id\",\n\"ie\",\n\"il\",\n\"in\",\n\"it\",\n\"jp\",\n\"kr\",\n\"lt\",\n\"lv\",\n\"ma\",\n\"mx\",\n\"my\",\n\"ng\",\n\"nl\",\n\"no\",\n\"nz\",\n\"ph\",\n\"pl\",\n\"pt\",\n\"ro\",\n\"rs\",\n\"ru\",\n\"sa\",\n\"se\",\n\"sg\",\n\"si\",\n\"sk\",\n\"th\",\n\"tr\",\n\"tw\",\n\"ua\",\n\"us\",\n\"ve\",\n\"za\",\n]:\nraise ValueError(\n\"country should be one out of the countries provided by news api\"\n)\nparams[\"country\"] = country\nif category is not None:\nif category not in [\n\"business\",\n\"entertainment\",\n\"general\",\n\"health\",\n\"science\",\n\"sports\",\n\"technology\",\n]:\nraise ValueError(\n\"category should be one out of the categories provided by newsapi\"\n)\nparams[\"category\"] = category\nif language is not None:\nif language not in [\n\"ar\",\n\"de\",\n\"en\",\n\"es\",\n\"fr\",\n\"he\",\n\"it\",\n\"nl\",\n\"no\",\n\"pt\",\n\"ru\",\n\"se\",\n\"ud\",\n\"zh\",\n]:\nraise ValueError(\n\"language should be one out of languages provided by newsapi\"\n)\nheaders = {\"X-Api-Key\": self.api_key}\ndata = await self._http_client.request(\n\"https://newsapi.org/v2/top-headlines\",\n\"GET\",\nheaders=headers,\nparams=params,\n)\nif data:\nreturn data\n</code></pre>"},{"location":"api_reference/NewsDash/#newsdash.client.NewsDash.http_client","title":"<code>http_client: HttpClient</code>  <code>property</code>","text":"<p>The http client NewsDash is using.</p> <p>Returns:</p> Type Description <code>HttpClient</code> <p>The http client..</p>"},{"location":"api_reference/NewsDash/#newsdash.client.NewsDash.__init__","title":"<code>__init__(api_key, *, session=None, file_logging=False)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>api_key</code> <code>str</code> <p>The api key you get from NewsApi.</p> required <code>session</code> <code>typing.Optional[aiohttp.ClientSession], optional</code> <p>Custom ClientSession you want the client to use., by default None</p> <code>None</code> <code>file_logging</code> <code>typing.Union[bool, list[os.PathLike, typing.Union[bool, str], typing.Union[bool, str], typing.Union[bool, str]]], optional</code> <p>Custom ClientSession you want the client to use., by default False</p> <code>False</code> <p>Returns:</p> Type Description <code>NewsDash</code> <p>The NewsDash client.</p> Source code in <code>newsdash\\client.py</code> <pre><code>def __init__(\nself,\napi_key: str,\n*,\nsession: tp.Optional[\"aiohttp.ClientSession\"] = None,\nfile_logging: tp.Union[\nbool,\nlist[\n\"os.PathLike\",\ntp.Union[bool, str],\ntp.Union[bool, str],\ntp.Union[bool, str],\n],\n] = False,\n) -&gt; None:\n\"\"\"\n    Parameters\n    ----------\n    api_key : str\n        The api key you get from NewsApi.\n    session : typing.Optional[aiohttp.ClientSession], optional\n        Custom ClientSession you want the client to use., by default None\n    file_logging : typing.Union[bool,list[os.PathLike,typing.Union[bool, str],typing.Union[bool, str],typing.Union[bool, str],],], optional\n        Custom ClientSession you want the client to use., by default False\n    Returns\n    -------\n    NewsDash\n        The NewsDash client.\n    \"\"\"\nself.logger = loguru.logger\nself.api_key = api_key\nif file_logging != False:\nfile = file_logging[0]\nif len(file_logging) &gt; 1 and file_logging[1]:\nrotation = file_logging[1]\nelse:\nrotation = None\nif len(file_logging) &gt; 2 and file_logging[2]:\nretention = file_logging[2]\nelse:\nretention = None\nif len(file_logging) &gt; 3 and file_logging[3]:\ncompression = file_logging[3]\nelse:\ncompression = None\nself.logger.add(\nfile, rotation=rotation, retention=retention, compression=compression\n)\nself._http_client = HttpClient(session=session, logger=self.logger)\n</code></pre>"},{"location":"api_reference/NewsDash/#newsdash.client.NewsDash.close","title":"<code>close()</code>  <code>async</code>","text":"<p>Closes the session, Note- no need to use it if you are using context manager.</p> Source code in <code>newsdash\\client.py</code> <pre><code>async def close(self) -&gt; None:\n\"\"\"\n    Closes the session, Note- no need to use it if you are using context manager.\n    \"\"\"\nself.logger.info(\"Closing session\")\nif self._http_client.session is not None:\nawait self._http_client.session.close()\n</code></pre>"},{"location":"api_reference/NewsDash/#newsdash.client.NewsDash.get_everything","title":"<code>get_everything(*, query, searchIn=None, sources=None, domains=None, excludeDomains=None, date_from=None, date_to=None, language=None, sortBy=None, pageSize=None, page=None)</code>  <code>async</code>","text":"<p>Get every news from the NewsApi by searching with query and other optional paameters.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str</code> <p>Keywords or phrases to search for in the article title and body.</p> required <code>searchIn</code> <code>typing.Literal['title', 'description', 'body'], optional</code> <p>The fields to restrict your query search to,by default None</p> <code>None</code> <code>sources</code> <code>str, optional</code> <p>A comma-seperated string of identifiers (maximum 20) for the news sources or blogs you want headlines from, by default None</p> <code>None</code> <code>domains</code> <code>str, optional</code> <p>A comma-seperated string of domains (eg bbc.co.uk, techcrunch.com, engadget.com) to restrict the search to, by default None</p> <code>None</code> <code>excludeDomains</code> <code>str, optional</code> <p>A comma-seperated string of domains (eg bbc.co.uk, techcrunch.com, engadget.com) to remove from the results, by default None</p> <code>None</code> <code>date_from</code> <code>str, optional</code> <p>A date and optional time for the oldest article allowed. This should be in ISO 8601 format (e.g. 2023-04-17 or 2023-04-17T12:33:30), by default None</p> <code>None</code> <code>date_to</code> <code>str, optional</code> <p>A date and optional time for the newest article allowed. This should be in ISO 8601 format (e.g. 2023-04-17 or 2023-04-17T12:33:30), by default None</p> <code>None</code> <code>language</code> <code>typing.Literal['ar', 'de', 'en', 'es', 'fr', 'he', 'it', 'nl', 'no', 'pt', 'ru', 'sv', 'ud', 'zh'], optional</code> <p>The 2-letter ISO-639-1 code of the language you want to get headlines for. Possible options: ar de en es fr he it nl no pt ru sv ud zh, by default None</p> <code>None</code> <code>sortBy</code> <code>typing.Literal['relevancy', 'popularity', 'publishedAt'], optional</code> <p>The order to sort the articles in. Possible options: relevancy, popularity, publishedAt. relevancy = articles more closely related to q come first. popularity = articles from popular sources and publishers come first. publishedAt = newest articles come first, by default None</p> <code>None</code> <code>pageSize</code> <code>int, optional</code> <p>The number of results to return per page, by default None</p> <code>None</code> <code>page</code> <code>int, optional</code> <p>Use this to page through the results, by default None</p> <code>None</code> <p>Returns:</p> Type Description <code>typing.Any</code> <p>The response from NewsApi after getting news.</p> <p>Raises:</p> Type Description <code>HTTPException</code> <p>raises HTTPException if the status code is not <code>ok</code>.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from newsdash import NewsDash\n&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; async def main():\n... async with NewsDash('YOUR_API_KEY') as nd:\n... print(await nd.get_everything(query='apple'))\n&gt;&gt;&gt; asyncio.run(main())\n</code></pre> Source code in <code>newsdash\\client.py</code> <pre><code>async def get_everything(\nself,\n*,\nquery: str,\nsearchIn: tp.Literal[\"title\", \"description\", \"body\"] = None,\nsources: str = None,\ndomains: str = None,\nexcludeDomains: str = None,\ndate_from: str = None,\ndate_to: str = None,\nlanguage: tp.Literal[\n\"ar\",\n\"de\",\n\"en\",\n\"es\",\n\"fr\",\n\"he\",\n\"it\",\n\"nl\",\n\"no\",\n\"pt\",\n\"ru\",\n\"sv\",\n\"ud\",\n\"zh\",\n] = None,\nsortBy: tp.Literal[\"relevancy\", \"popularity\", \"publishedAt\"] = None,\npageSize: int = None,\npage: int = None,\n) -&gt; tp.Any:\n\"\"\"\n    Get every news from the NewsApi by searching with query and other optional paameters.\n    Parameters\n    ----------\n    query : str\n        Keywords or phrases to search for in the article title and body.\n    searchIn : typing.Literal[\"title\",\"description\",\"body\"], optional\n        The fields to restrict your query search to,by default None\n    sources : str, optional\n        A comma-seperated string of identifiers (maximum 20) for the news sources or blogs you want headlines from, by default None\n    domains : str, optional\n        A comma-seperated string of domains (eg bbc.co.uk, techcrunch.com, engadget.com) to restrict the search to, by default None\n    excludeDomains : str, optional\n        A comma-seperated string of domains (eg bbc.co.uk, techcrunch.com, engadget.com) to remove from the results, by default None\n    date_from : str, optional\n        A date and optional time for the oldest article allowed. This should be in ISO 8601 format (e.g. 2023-04-17 or 2023-04-17T12:33:30), by default None\n    date_to : str, optional\n        A date and optional time for the newest article allowed. This should be in ISO 8601 format (e.g. 2023-04-17 or 2023-04-17T12:33:30), by default None\n    language : typing.Literal[\"ar\", \"de\", \"en\", \"es\", \"fr\", \"he\", \"it\", \"nl\", \"no\", \"pt\", \"ru\", \"sv\", \"ud\", \"zh\"], optional\n        The 2-letter ISO-639-1 code of the language you want to get headlines for. Possible options: ar de en es fr he it nl no pt ru sv ud zh, by default None\n    sortBy : typing.Literal[\"relevancy\", \"popularity\", \"publishedAt\"], optional\n        The order to sort the articles in. Possible options: relevancy, popularity, publishedAt. relevancy = articles more closely related to q come first. popularity = articles from popular sources and publishers come first. publishedAt = newest articles come first, by default None\n    pageSize : int, optional\n        The number of results to return per page, by default None\n    page : int, optional\n        Use this to page through the results, by default None\n    Returns\n    -------\n    typing.Any\n        The response from NewsApi after getting news.\n    Raises\n    ------\n    HTTPException\n        raises HTTPException if the status code is not `ok`.\n    Examples\n    -------\n    &gt;&gt;&gt; from newsdash import NewsDash\n    &gt;&gt;&gt; import asyncio\n    &gt;&gt;&gt; async def main():\n    ... async with NewsDash('YOUR_API_KEY') as nd:\n    ... print(await nd.get_everything(query='apple'))\n    &gt;&gt;&gt; asyncio.run(main())\n    \"\"\"\nparams = {}\nif query is not None:\nif not isinstance(query, str):\nraise TypeError(\"query should be a string\")\nparams[\"q\"] = query\nif searchIn is not None:\nif isinstance(searchIn, str):\nif searchIn not in [\"title\", \"description\", \"body\"]:\nraise ValueError(\n\"searchIn should be one of 'title', 'description', or 'body'\"\n)\nelse:\nraise TypeError(\"searchIn should be a string\")\nparams[\"searchIn\"] = searchIn\nif sources is not None:\nif not isinstance(sources, str):\nraise TypeError(\"sources should be a string\")\nparams[\"sources\"] = sources\nif domains is not None:\nif not isinstance(domains, str):\nraise TypeError(\"domains should be a string\")\nparams[\"domains\"] = domains\nif excludeDomains is not None:\nif not isinstance(excludeDomains, str):\nraise TypeError(\"excludeDomains should be a string\")\nparams[\"excludeDomains\"] = excludeDomains\nif date_from is not None:\nif not isinstance(date_from, str):\nraise TypeError(\"date_from should be a string\")\nparams[\"from\"] = date_from\nif date_to is not None:\nif not isinstance(date_to, str):\nraise TypeError(\"date_to should be a string\")\nparams[\"to\"] = date_to\nif language is not None:\nif isinstance(language, str):\nif language not in [\n\"ar\",\n\"de\",\n\"en\",\n\"es\",\n\"fr\",\n\"he\",\n\"it\",\n\"nl\",\n\"no\",\n\"pt\",\n\"ru\",\n\"sv\",\n\"ud\",\n\"zh\",\n]:\nraise ValueError(\n\"language should be one out of the languages provided by newsapi\"\n)\nelse:\nraise TypeError(\"language should be a string\")\nparams[\"language\"] = language\nif sortBy is not None:\nif isinstance(sortBy, str):\nif sortBy not in [\"relevancy\", \"popularity\", \"publishedAt\"]:\nraise ValueError(\n\"sortBy should be one out of relevancy, popularity or publishedAt\"\n)\nelse:\nraise TypeError(\"sortBy should be a string\")\nparams[\"sortBy\"] = sortBy\nif pageSize is not None:\nif isinstance(pageSize, int):\nif pageSize &lt; 0:\nraise ValueError(\"pageSize should be greater than 0\")\nelse:\nraise TypeError(\"pageSize should be an integer\")\nparams[\"pageSize\"] = pageSize\nif page is not None:\nif isinstance(page, int):\nif page &lt; 0:\nraise ValueError(\"page should be greater than 0\")\nelse:\nraise TypeError(\"page should be an integer\")\nparams[\"page\"] = page\nheaders = {\"X-Api-Key\": self.api_key}\ndata = await self._http_client.request(\n\"https://newsapi.org/v2/everything\", \"GET\", headers=headers, params=params\n)\nif data:\nreturn data\n</code></pre>"},{"location":"api_reference/NewsDash/#newsdash.client.NewsDash.get_sources","title":"<code>get_sources(*, country=None, language=None, category=None)</code>  <code>async</code>","text":"<p>Get the sources or publishers of news available on NewsApi.</p> <p>Parameters:</p> Name Type Description Default <code>country</code> <code>typinp.Literal[ae, ar, at, au, be, bg, br, ca, ch, cn, co, cu, cz, de, eg, fr, gb, gr, hk, hu, id, ie, il, in, it, jp, kr, lt, lv, ma, mx, my, ng, nl, no, nz, ph, pl, pt, ro, rs, ru, sa, se, sg, si, sk, th, tr, tw, ua, us, ve, za], optional</code> <p>The 2-letter ISO 3166-1 code of the country you want to get headlines for. Possible options: ae ar at au be bg br ca ch cn co cu cz de eg fr gb gr hk hu id ie il in it jp kr lt lv ma mx my ng nl no nz ph pl pt ro rs ru sa se sg si sk th tr tw ua us ve za,, by default None</p> <code>None</code> <code>language</code> <code>typinp.Literal[ar, de, en, es, fr, he, it, nl, no, pt, ru, sv, ud, zh], optional</code> <p>The 2-letter ISO-639-1 code of the language you want to get headlines for. Possible options: ar de en es fr he it nl no pt ru sv ud zh, by default None</p> <code>None</code> <code>category</code> <code>typing.Literal['business', 'entertainment', 'general', 'health', 'science', 'sports', 'technology'], optional</code> <p>The category you want to get headlines for. Possible options: business entertainment general health science sports technology, by default None</p> <code>None</code> <p>Returns:</p> Type Description <code> typing.Any</code> <p>The response from NewsApi after getting sources.</p> <p>Raises:</p> Type Description <code>HTTPException</code> <p>raises HTTPException if the status code is not <code>ok</code>.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from newsdash import NewsDash\n&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; async def main():\n... async with NewsDash('YOUR_API_KEY') as nd:\n... print(await nd.get_sources(catgory='entertainment'))\n&gt;&gt;&gt; asyncio.run(main())\n</code></pre> Source code in <code>newsdash\\client.py</code> <pre><code>async def get_sources(\nself,\n*,\ncountry: tp.Literal[\n\"ae\",\n\"ar\",\n\"at\",\n\"au\",\n\"be\",\n\"bg\",\n\"br\",\n\"ca\",\n\"ch\",\n\"cn\",\n\"co\",\n\"cu\",\n\"cz\",\n\"de\",\n\"eg\",\n\"fr\",\n\"gb\",\n\"gr\",\n\"hk\",\n\"hu\",\n\"id\",\n\"ie\",\n\"il\",\n\"in\",\n\"it\",\n\"jp\",\n\"kr\",\n\"lt\",\n\"lv\",\n\"ma\",\n\"mx\",\n\"my\",\n\"ng\",\n\"nl\",\n\"no\",\n\"nz\",\n\"ph\",\n\"pl\",\n\"pt\",\n\"ro\",\n\"rs\",\n\"ru\",\n\"sa\",\n\"se\",\n\"sg\",\n\"si\",\n\"sk\",\n\"th\",\n\"tr\",\n\"tw\",\n\"ua\",\n\"us\",\n\"ve\",\n\"za\",\n] = None,\nlanguage: tp.Literal[\n\"ar\",\n\"de\",\n\"en\",\n\"es\",\n\"fr\",\n\"he\",\n\"it\",\n\"nl\",\n\"no\",\n\"pt\",\n\"ru\",\n\"se\",\n\"ud\",\n\"zh\",\n] = None,\ncategory: tp.Literal[\n\"business\",\n\"entertainment\",\n\"general\",\n\"health\",\n\"science\",\n\"sports\",\n\"technology\",\n] = None,\n) -&gt; tp.Any:\n\"\"\"\n    Get the sources or publishers of news available on NewsApi.\n    Parameters\n    ----------\n    country : typinp.Literal[\"ae\", \"ar\", \"at\", \"au\", \"be\", \"bg\", \"br\", \"ca\", \"ch\", \"cn\", \"co\", \"cu\", \"cz\", \"de\", \"eg\", \"fr\", \"gb\", \"gr\", \"hk\", \"hu\", \"id\", \"ie\", \"il\", \"in\", \"it\", \"jp\", \"kr\", \"lt\", \"lv\", \"ma\", \"mx\", \"my\", \"ng\", \"nl\", \"no\", \"nz\", \"ph\", \"pl\", \"pt\", \"ro\", \"rs\", \"ru\", \"sa\", \"se\", \"sg\", \"si\", \"sk\", \"th\", \"tr\", \"tw\", \"ua\", \"us\", \"ve\", \"za\"], optional\n        The 2-letter ISO 3166-1 code of the country you want to get headlines for. Possible options: ae ar at au be bg br ca ch cn co cu cz de eg fr gb gr hk hu id ie il in it jp kr lt lv ma mx my ng nl no nz ph pl pt ro rs ru sa se sg si sk th tr tw ua us ve za,, by default None\n    language : typinp.Literal[\"ar\", \"de\", \"en\", \"es\", \"fr\", \"he\", \"it\", \"nl\", \"no\", \"pt\", \"ru\", \"sv\", \"ud\", \"zh\"], optional\n        The 2-letter ISO-639-1 code of the language you want to get headlines for. Possible options: ar de en es fr he it nl no pt ru sv ud zh, by default None\n    category : typing.Literal[\"business\",\"entertainment\",\"general\",\"health\",\"science\",\"sports\",\"technology\"] , optional\n        The category you want to get headlines for. Possible options: business entertainment general health science sports technology, by default None\n    Returns\n    -------\n     typing.Any\n        The response from NewsApi after getting sources.\n    Raises\n    ------\n    HTTPException\n        raises HTTPException if the status code is not `ok`.\n    Examples\n    -------\n    &gt;&gt;&gt; from newsdash import NewsDash\n    &gt;&gt;&gt; import asyncio\n    &gt;&gt;&gt; async def main():\n    ... async with NewsDash('YOUR_API_KEY') as nd:\n    ... print(await nd.get_sources(catgory='entertainment'))\n    &gt;&gt;&gt; asyncio.run(main())\n    \"\"\"\nparams = {}\nif country is not None:\nif country not in [\n\"ae\",\n\"ar\",\n\"at\",\n\"au\",\n\"be\",\n\"bg\",\n\"br\",\n\"ca\",\n\"ch\",\n\"cn\",\n\"co\",\n\"cu\",\n\"cz\",\n\"de\",\n\"eg\",\n\"fr\",\n\"gb\",\n\"gr\",\n\"hk\",\n\"hu\",\n\"id\",\n\"ie\",\n\"il\",\n\"in\",\n\"it\",\n\"jp\",\n\"kr\",\n\"lt\",\n\"lv\",\n\"ma\",\n\"mx\",\n\"my\",\n\"ng\",\n\"nl\",\n\"no\",\n\"nz\",\n\"ph\",\n\"pl\",\n\"pt\",\n\"ro\",\n\"rs\",\n\"ru\",\n\"sa\",\n\"se\",\n\"sg\",\n\"si\",\n\"sk\",\n\"th\",\n\"tr\",\n\"tw\",\n\"ua\",\n\"us\",\n\"ve\",\n\"za\",\n]:\nraise ValueError(\n\"country should be one out of the countries provided by news api\"\n)\nparams[\"country\"] = country\nif category is not None:\nif category not in [\n\"business\",\n\"entertainment\",\n\"general\",\n\"health\",\n\"science\",\n\"sports\",\n\"technology\",\n]:\nraise ValueError(\n\"category should be one out of the categories provided by newsapi\"\n)\nparams[\"category\"] = category\nif language is not None:\nif language not in [\n\"ar\",\n\"de\",\n\"en\",\n\"es\",\n\"fr\",\n\"he\",\n\"it\",\n\"nl\",\n\"no\",\n\"pt\",\n\"ru\",\n\"se\",\n\"ud\",\n\"zh\",\n]:\nraise ValueError(\n\"language should be one out of languages provided by newsapi\"\n)\nheaders = {\"X-Api-Key\": self.api_key}\ndata = await self._http_client.request(\n\"https://newsapi.org/v2/top-headlines\",\n\"GET\",\nheaders=headers,\nparams=params,\n)\nif data:\nreturn data\n</code></pre>"},{"location":"api_reference/NewsDash/#newsdash.client.NewsDash.get_top_headlines","title":"<code>get_top_headlines(*, country=None, category=None, sources=None, query=None, pageSize=None, page=None)</code>  <code>async</code>","text":"<p>Get the top headleines of news from the NewsApi by searching with query and other optional paameters.</p> <p>Parameters:</p> Name Type Description Default <code>country</code> <code>typing.Literal['ae', 'ar', 'at', 'au', 'be', 'bg', 'br', 'ca', 'ch', 'cn', 'co', 'cu', 'cz', 'de', 'eg', 'fr', 'gb', 'gr', 'hk', 'hu', 'id', 'ie', 'il', 'in', 'it', 'jp', 'kr', 'lt', 'lv', 'ma', 'mx', 'my', 'ng', 'nl', 'no', 'nz', 'ph', 'pl', 'pt', 'ro', 'rs', 'ru', 'sa', 'se', 'sg', 'si', 'sk', 'th', 'tr', 'tw', 'ua', 'us', 've', 'za'], optional</code> <p>The 2-letter ISO 3166-1 code of the country you want to get headlines for. Possible options: ae ar at au be bg br ca ch cn co cu cz de eg fr gb gr hk hu id ie il in it jp kr lt lv ma mx my ng nl no nz ph pl pt ro rs ru sa se sg si sk th tr tw ua us ve za, by default None</p> <code>None</code> <code>category</code> <code>typing.Literal['business', 'entertainment', 'general', 'health', 'science', 'sports', 'technology'], optional</code> <p>The category you want to get headlines for. Possible options: business entertainment general health science sports technology, by default None</p> <code>None</code> <code>sources</code> <code>str, optional</code> <p>A comma-seperated string of identifiers for the news sources or blogs you want headlines from, by default None</p> <code>None</code> <code>query</code> <code>str, optional</code> <p>Keywords or a phrase to search for, by default None</p> <code>None</code> <code>pageSize</code> <code>int, optional</code> <p>he number of results to return per page (request). 20 is the default, 100 is the maximum, by default None</p> <code>None</code> <code>page</code> <code>int, optional</code> <p>Use this to page through the results if the total results found is greater than the page size, by default None</p> <code>None</code> <p>Returns:</p> Type Description <code> typing.Any</code> <p>The response from NewsApi after getting news.</p> <p>Raises:</p> Type Description <code>HTTPException</code> <p>raises HTTPException if the status code is not <code>ok</code>.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from newsdash import NewsDash\n&gt;&gt;&gt; import asyncio\n&gt;&gt;&gt; async def main():\n... async with NewsDash('YOUR_API_KEY') as nd:\n... print(await nd.get_top_headlines(query='apple'))\n&gt;&gt;&gt; asyncio.run(main())\n</code></pre> Source code in <code>newsdash\\client.py</code> <pre><code>async def get_top_headlines(\nself,\n*,\ncountry: tp.Literal[\n\"ae\",\n\"ar\",\n\"at\",\n\"au\",\n\"be\",\n\"bg\",\n\"br\",\n\"ca\",\n\"ch\",\n\"cn\",\n\"co\",\n\"cu\",\n\"cz\",\n\"de\",\n\"eg\",\n\"fr\",\n\"gb\",\n\"gr\",\n\"hk\",\n\"hu\",\n\"id\",\n\"ie\",\n\"il\",\n\"in\",\n\"it\",\n\"jp\",\n\"kr\",\n\"lt\",\n\"lv\",\n\"ma\",\n\"mx\",\n\"my\",\n\"ng\",\n\"nl\",\n\"no\",\n\"nz\",\n\"ph\",\n\"pl\",\n\"pt\",\n\"ro\",\n\"rs\",\n\"ru\",\n\"sa\",\n\"se\",\n\"sg\",\n\"si\",\n\"sk\",\n\"th\",\n\"tr\",\n\"tw\",\n\"ua\",\n\"us\",\n\"ve\",\n\"za\",\n] = None,\ncategory: tp.Literal[\n\"business\",\n\"entertainment\",\n\"general\",\n\"health\",\n\"science\",\n\"sports\",\n\"technology\",\n] = None,\nsources: str = None,\nquery: str = None,\npageSize: int = None,\npage: int = None,\n) -&gt; tp.Any:\n\"\"\"\n    Get the top headleines of news from the NewsApi by searching with query and other optional paameters.\n    Parameters\n    ----------\n    country : typing.Literal[\"ae\", \"ar\", \"at\", \"au\", \"be\", \"bg\", \"br\", \"ca\", \"ch\", \"cn\", \"co\", \"cu\", \"cz\", \"de\", \"eg\", \"fr\", \"gb\", \"gr\", \"hk\", \"hu\", \"id\", \"ie\", \"il\", \"in\", \"it\", \"jp\", \"kr\", \"lt\", \"lv\", \"ma\", \"mx\", \"my\", \"ng\", \"nl\", \"no\", \"nz\", \"ph\", \"pl\", \"pt\", \"ro\", \"rs\", \"ru\", \"sa\", \"se\", \"sg\", \"si\", \"sk\", \"th\", \"tr\", \"tw\", \"ua\", \"us\", \"ve\", \"za\"], optional\n        The 2-letter ISO 3166-1 code of the country you want to get headlines for. Possible options: ae ar at au be bg br ca ch cn co cu cz de eg fr gb gr hk hu id ie il in it jp kr lt lv ma mx my ng nl no nz ph pl pt ro rs ru sa se sg si sk th tr tw ua us ve za, by default None\n    category : typing.Literal[\"business\",\"entertainment\",\"general\",\"health\",\"science\",\"sports\",\"technology\"], optional\n        The category you want to get headlines for. Possible options: business entertainment general health science sports technology, by default None\n    sources : str, optional\n        A comma-seperated string of identifiers for the news sources or blogs you want headlines from, by default None\n    query : str, optional\n        Keywords or a phrase to search for, by default None\n    pageSize : int, optional\n        he number of results to return per page (request). 20 is the default, 100 is the maximum, by default None\n    page : int, optional\n        Use this to page through the results if the total results found is greater than the page size, by default None\n    Returns\n    -------\n     typing.Any\n        The response from NewsApi after getting news.\n    Raises\n    ------\n    HTTPException\n        raises HTTPException if the status code is not `ok`.\n    Examples\n    -------\n    &gt;&gt;&gt; from newsdash import NewsDash\n    &gt;&gt;&gt; import asyncio\n    &gt;&gt;&gt; async def main():\n    ... async with NewsDash('YOUR_API_KEY') as nd:\n    ... print(await nd.get_top_headlines(query='apple'))\n    &gt;&gt;&gt; asyncio.run(main())\n    \"\"\"\nparams = {}\nif country is not None:\nif country not in [\n\"ae\",\n\"ar\",\n\"at\",\n\"au\",\n\"be\",\n\"bg\",\n\"br\",\n\"ca\",\n\"ch\",\n\"cn\",\n\"co\",\n\"cu\",\n\"cz\",\n\"de\",\n\"eg\",\n\"fr\",\n\"gb\",\n\"gr\",\n\"hk\",\n\"hu\",\n\"id\",\n\"ie\",\n\"il\",\n\"in\",\n\"it\",\n\"jp\",\n\"kr\",\n\"lt\",\n\"lv\",\n\"ma\",\n\"mx\",\n\"my\",\n\"ng\",\n\"nl\",\n\"no\",\n\"nz\",\n\"ph\",\n\"pl\",\n\"pt\",\n\"ro\",\n\"rs\",\n\"ru\",\n\"sa\",\n\"se\",\n\"sg\",\n\"si\",\n\"sk\",\n\"th\",\n\"tr\",\n\"tw\",\n\"ua\",\n\"us\",\n\"ve\",\n\"za\",\n]:\nraise ValueError(\n\"country should be one out of the countries provided by news api\"\n)\nparams[\"country\"] = country\nif category is not None:\nif category not in [\n\"business\",\n\"entertainment\",\n\"general\",\n\"health\",\n\"science\",\n\"sports\",\n\"technology\",\n]:\nraise ValueError(\n\"category should be one out of the categories provided by news api\"\n)\nparams[\"category\"] = category\nif sources is not None:\nif not isinstance(sources, str):\nraise TypeError(\"sources should be an string\")\nparams[\"sources\"] = sources\nif query is not None:\nif not isinstance(query, str):\nraise TypeError(\"query should be an string\")\nparams[\"q\"] = query\nif pageSize is not None:\nif not isinstance(pageSize, int):\nraise TypeError(\"pageSize should be an integer\")\nparams[\"pageSize\"] = pageSize\nif page is not None:\nif not isinstance(page, int):\nraise TypeError(\"page should be an integer\")\nparams[\"page\"] = page\nheaders = {\"X-Api-Key\": self.api_key}\ndata = await self._http_client.request(\n\"https://newsapi.org/v2/top-headlines\",\n\"GET\",\nheaders=headers,\nparams=params,\n)\nif data:\nreturn data\n</code></pre>"},{"location":"guides/basic/","title":"Basic usage of newsdash","text":""},{"location":"guides/basic/#with-client","title":"With client","text":"<ul> <li>import the required modules</li> <li>Create a client variable with NewsDash and pass it the api key</li> <li>make an async function and use the client to get news</li> <li>close the client when not in use</li> <li>run the function using asyncio</li> </ul> <p>Here is the example code: <pre><code># import required modules\nimport asyncio\nfrom newsdash import NewsDash\n# make a function to get news\nasync def get_news() -&gt; None:\n# initialize the client using your api key\nclient = NewsDash('YOUR_API_KEY')\n# get news\nprint(await client.get_everything(query='apple'))\n# make sure to close client\nawait client.close()\n# run the async function\nasyncio.run(get_news())\n</code></pre></p>"},{"location":"guides/basic/#with-async-context-manager","title":"With async context manager","text":"<ul> <li>import the required modules</li> <li>make an async function and make an async context manager and pass it the api key</li> <li>get the news</li> <li>you dont need to close the client,it automatically get closed</li> <li>run the function using asyncio <pre><code># import required modules\nfrom newsdash import NewsDash\nimport asyncio\n# make a function to get news\nasync def main():\n# make an async context manager and pass it the api key\nasync with NewsDash(\"api_key\") as nd:\n# get news\nprint(await nd.get_everything(query=\"apple\"))\n# no need to close the client,it gets closed automatically\n# await nd.close() (no need to close)\nasyncio.run(main())\n</code></pre></li> </ul>"}]}